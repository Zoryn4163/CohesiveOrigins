namespace = ehof_incohesive_alderson
event = {
	id = ehof_incohesive_alderson.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		any_playable_country = {
			has_origin = origin_alderson_incohesive
		}
	}
	immediate = {
		every_playable_country = {
			limit = {
				has_origin = origin_alderson_incohesive
			}
			# if = { AI can now do a crime :)
			# 	limit = { is_ai = yes }
			# 	capital_scope.solar_system = { 
			# 		set_star_flag = gigas_new_planets 
			# 		set_star_flag = ehof_ai_reset
			# 	}
			# 	country_event = { id = ehof_incohesive_alderson.8} #dummy event to fix scope
			# }
			set_country_flag = ehof_precursor_spawned
			set_country_flag = starting_event			# go away
			country_event = {
				id = ehof_incohesive_alderson.2
			}
		}
	}
}

# There is some trickiness to this event - most of these effects appear redundant
# but are required to fire IN THIS ORDER to work correctly. This is most for names
# - Lans
# MAIN EVENT - should hopefully scope correctly if multiple ppl have the origin
# It's on you if you play MP with 8+ people all using this origin, though.
# DO NOT FIRE THIS EVENT MANUALLY
country_event = {
	id = ehof_incohesive_alderson.2
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_origin = origin_alderson_incohesive
		NOT = {
			has_country_flag = ehofo_SETUP
		}
	}
	immediate = {
		set_country_flag = ehofo_SETUP
		country_event = {
			id = ehof_incohesive_alderson.3
		}
		country_event = {
			id = ehof_incohesive_alderson.6
			days = 5
		}
		# so help you God if it takes you longer than 5 days to set your giga settings.
		random_owned_leader = {
			limit = {
				leader_class = official
			}
			unassign_leader = this
			save_global_event_target_as = ehofo_governor
		}
		capital_scope = {
			save_global_event_target_as = ehofo_old_world
			solar_system = {
				save_global_event_target_as = ehofo_old_system
			}
			sector = {
				set_name = ""				# hide from galaxy map?
			}
		}
		# New System name changes to Old System name
		# Old Star name changes to New Star name
		# New Star name changes to New System name
		# Old System name changes to Old Star name
		# New Capital name changes to Old Capital name
		event_target:ehofo_new_system = {
			set_name = {
				key = "ehofo_new_system_name"
				variable_string = "[ehofo_old_system.GetName]"
			}
		}
		event_target:ehofo_old_system = {
			system_star = {
				set_name = {
					key = "ehofo_old_star_name"
					variable_string = "[ehofo_new_system.system_star.GetName]"
				}
			}
		}
		event_target:ehofo_new_system = {
			system_star = {
				set_name = {
					key = "ehofo_new_star_name"
					variable_string = "[ehofo_new_system.GetName]"
				}
			}
		}
		event_target:ehofo_old_system = {
			set_name = {
				key = "ehofo_old_system_name"
				variable_string = "[ehofo_old_system.system_star.GetName]"
			}
		}
		event_target:ehofo_new_system = {
			random_system_planet = {
				limit = {
					has_planet_flag = colonize_me_instead
				}
				set_planet_flag = forbid_guillis_planet_modifiers
				clear_deposits = yes
				create_colony = {
					owner = root
				}
				save_global_event_target_as = ehofo_new_world
				set_name = {
					key = "ehofo_new_capital_name"
					variable_string = "[ehofo_old_world.GetName]"
				}
			}
			save_event_target_as = ehof_color_system_name
		}
		country_event = {
			id = ehof_systems.005
		}		# Generate System Color
		event_target:ehofo_new_system = {
			create_starbase = {
				size = "starbase_starport"
				module = "shipyard"
				building = "crew_quarters"
				owner = root
				effect = {
					save_global_event_target_as = ehofo_starbase
				}
			}
			# AFTER system colour, so the starbase is named with the colour of the system (:
		}
		event_target:ehofo_old_system = {
			random_system_planet = {
				limit = {
					has_planet_flag = ehof_origin_planet_1
				}
				set_name = {
					key = "ehofo_old_planet_name_1"
					variable_string = "[solar_system.GetName]"
				}
			}
			random_system_planet = {
				limit = {
					has_planet_flag = ehof_origin_planet_2
				}
				set_name = {
					key = "ehofo_old_planet_name_2"
					variable_string = "[solar_system.GetName]"
				}
			}
		}
		capital_scope = {
			solar_system = {
				starbase = {
					fleet = {
						destroy_fleet = this
					}
				}
			}
			random_owned_pop = {
				limit = {
					root.owner_main_species = {
						NOT = {
							is_same_species = prev.species
						}
					}
				}
				save_global_event_target_as = ehofo_secondary_species
			}
		}
		every_owned_fleet = {
			limit = {
				any_owned_ship = {
					OR = {
						ehof_is_construction_ship = yes
						ehof_is_science_ship = yes
						is_ship_class = shipclass_military #Covers Cordyceptic military
					}
				}
			}
			set_location = event_target:ehofo_starbase.orbit
			if = {
				limit = { any_owned_ship = { is_ship_class = shipclass_military } }
				set_home_base = event_target:ehofo_starbase
			}
		}
		event_target:ehofo_new_world = {
			change_pc = event_target:ehofo_old_world
			generate_start_deposits_and_blockers = no
			#generate_start_buildings_and_districts = yes Moving this to be later to enable inbuilt compatability with PD
			generate_start_pops = yes
			if = {
				limit = {
					exists = event_target:ehofo_secondary_species
				}
				every_owned_pop = {
					limit = {
						species = {
							NOT = {
								root.owner_main_species = {
									is_same_species = prev
								}
							}
						}
					}
					prev = {
						create_pop = {
							species = event_target:ehofo_secondary_species
						}
					}
					kill_pop = yes
				}
			}
			set_planet_size = 90
			set_capital = yes
			if = {
				limit = {
					ROOT = { is_ascensionist_empire = yes }
				}
				set_planetary_ascension_tier = 1
			}
		}
		event_target:ehofo_old_world = {
			destroy_colony = yes
			clear_deposits = yes
			remove_all_buildings = yes
			remove_all_districts = yes
			change_pc = pc_barren_cold
			#remove_planet = yes # not required
		}
		country_event = {
			id = ehof_incohesive_alderson.4
		}
		event_target:ehofo_new_world = {
			sector.sector_capital = {
				assign_leader = event_target:ehofo_governor
			}
		}
		# create_fleet = {
		# 	effect = {
		# 		set_owner = prev
		# 		create_ship = {
		# 			name = random
		# 			random_existing_design = science
		# 		}
		# 		set_fleet_stance = evasive
		# 		#set_location = prev.capital_star
		# 		set_location = event_target:ehofo_new_system
		# 		set_leader = event_target:ehofo_scientist
		# 	}
		# }
		# create_fleet = {
		# 	effect = {
		# 		set_owner = prev
		# 		create_ship = {
		# 			name = random
		# 			random_existing_design = constructor
		# 		}
		# 		set_fleet_stance = evasive
		# 		set_location = event_target:ehofo_new_system
		# 	}
		# }
		# create_fleet = {
		# 	set_take_point = yes
		# 	effect = {
		# 		set_owner = prev
		# 		while = {
		# 			count = 3
		# 			create_ship = {
		# 				name = random
		# 				random_existing_design = corvette
		# 			}
		# 		}
		# 		set_location = event_target:ehofo_new_system
		# 	}
		# }
		clear_global_event_target = ehofo_old_world
		clear_global_event_target = ehofo_old_system
		clear_global_event_target = ehofo_new_world
		clear_global_event_target = ehofo_new_system
		clear_global_event_target = ehofo_starbase
		clear_global_event_target = ehofo_governor
		if = {
			limit = {
				exists = event_target:ehofo_secondary_species
			}
			clear_global_event_target = ehofo_secondary_species
		}
		country_event = {
			id = ehof_incohesive_alderson.5
		}
		#add_modifier = {
		#	modifier = mod_ehof_origin_sensorrange_debug
		#}
	}
}

# Generate new ehof cluster to use
country_event = {
	id = ehof_incohesive_alderson.3
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_origin = origin_alderson_incohesive
	}
	immediate = {
		if = {
			limit = {
				exists = event_target:current_system_creator
			}
			clear_global_event_target = current_system_creator
		}
		save_global_event_target_as = current_system_creator
		set_country_flag = has_ehof_cluster
		random_list = {
			1 = {
				modifier = {
					factor = 0
					has_global_flag = ehof_10_taken
				}
				set_global_flag = ehof_10_taken
				ehof_alderson_new_initialize_system = {
					ehof_init_min_angle = @ehof_10_taken_min_angle
					ehof_init_max_angle = @ehof_10_taken_max_angle
				}
			}
			1 = {
				modifier = {
					factor = 0
					has_global_flag = ehof_30_taken
				}
				set_global_flag = ehof_30_taken
				ehof_alderson_new_initialize_system = {
					ehof_init_min_angle = @ehof_30_taken_min_angle
					ehof_init_max_angle = @ehof_30_taken_max_angle
				}
			}
			1 = {
				modifier = {
					factor = 0
					has_global_flag = ehof_50_taken
				}
				set_global_flag = ehof_50_taken
				ehof_alderson_new_initialize_system = {
					ehof_init_min_angle = @ehof_50_taken_min_angle
					ehof_init_max_angle = @ehof_50_taken_max_angle
				}
		}
			#1 = {
			#	modifier = { factor = 0 has_global_flag = ehof_70_taken }
			#	set_global_flag = ehof_70_taken
		# ehof_alderson_new_initialize_system = {
		#	ehof_init_min_angle = @ehof_70_taken_min_angle
		#	ehof_init_max_angle = @ehof_70_taken_max_angle
		#}
			#}
			#1 = {
		#
		#
		#
		#	modifier = { factor = 0 has_global_flag = ehof_90_taken }
		#	set_global_flag = ehof_90_taken
		# ehof_alderson_new_initialize_system = {
		#	ehof_init_min_angle = @ehof_90_taken_min_angle
		#	ehof_init_max_angle = @ehof_90_taken_max_angle
		#}
		#}
		#1 = {
		#	modifier = { factor = 0 has_global_flag = ehof_110_taken }
		#	set_global_flag = ehof_110_taken
				# ehof_alderson_new_initialize_system = {
		#	ehof_init_min_angle = @ehof_110_taken_min_angle
		#	ehof_init_max_angle = @ehof_110_taken_max_angle
		#}
		#}
		1 = {
			modifier = {
				factor = 0
				has_global_flag = ehof_130_taken
			}
			set_global_flag = ehof_130_taken
			ehof_alderson_new_initialize_system = {
				ehof_init_min_angle = @ehof_130_taken_min_angle
				ehof_init_max_angle = @ehof_130_taken_max_angle
			}
		}
		1 = {
			modifier = {
				factor = 0
				has_global_flag = ehof_150_taken
			}
			set_global_flag = ehof_150_taken
			ehof_alderson_new_initialize_system = {
				ehof_init_min_angle = @ehof_150_taken_min_angle
				ehof_init_max_angle = @ehof_150_taken_max_angle
			}
		}
		1 = {
			modifier = {
				factor = 0
				has_global_flag = ehof_170_taken
			}
			set_global_flag = ehof_170_taken
			ehof_alderson_new_initialize_system = {
				ehof_init_min_angle = @ehof_170_taken_min_angle
				ehof_init_max_angle = @ehof_170_taken_max_angle
			}
		}
		1 = {
			modifier = {
				factor = 0
				has_global_flag = ehof_190_taken
			}
			set_global_flag = ehof_190_taken
			ehof_alderson_new_initialize_system = {
				ehof_init_min_angle = @ehof_190_taken_min_angle
				ehof_init_max_angle = @ehof_190_taken_max_angle
			}
		}
		1 = {
			modifier = {
				factor = 0
				has_global_flag = ehof_210_taken
			}
			set_global_flag = ehof_210_taken
			ehof_alderson_new_initialize_system = {
				ehof_init_min_angle = @ehof_210_taken_min_angle
				ehof_init_max_angle = @ehof_210_taken_max_angle
			}
		}
		1 = {
			modifier = {
				factor = 0
				has_global_flag = ehof_230_taken
			}
			set_global_flag = ehof_230_taken
			ehof_alderson_new_initialize_system = {
				ehof_init_min_angle = @ehof_230_taken_min_angle
				ehof_init_max_angle = @ehof_230_taken_max_angle
			}
		}
		#1 = {
		#	modifier = { factor = 0 has_global_flag = ehof_250_taken }
		#	set_global_flag = ehof_250_taken
		# ehof_alderson_new_initialize_system = {
		#	ehof_init_min_angle = @ehof_250_taken_min_angle
		#	ehof_init_max_angle = @ehof_250_taken_max_angle
		#}
		#}
		#1 = {
		#	modifier = { factor = 0 has_global_flag = ehof_270_taken }
		#	set_global_flag = ehof_270_taken
		# ehof_alderson_new_initialize_system = {
		#	ehof_init_min_angle = @ehof_270_taken_min_angle
		#	ehof_init_max_angle = @ehof_270_taken_max_angle
		#}
		#}
		#1 = {
		#	modifier = { factor = 0 has_global_flag = ehof_290_taken }
		#	set_global_flag = ehof_290_taken
		# ehof_alderson_new_initialize_system = {
		#	ehof_init_min_angle = @ehof_290_taken_min_angle
		#	ehof_init_max_angle = @ehof_290_taken_max_angle
		#}
		#}
		1 = {

			modifier = {
				factor = 0
				has_global_flag = ehof_310_taken
			}
			set_global_flag = ehof_310_taken
			ehof_alderson_new_initialize_system = {
				ehof_init_min_angle = @ehof_310_taken_min_angle
				ehof_init_max_angle = @ehof_310_taken_max_angle
			}

		}
		1 = {

			modifier = {
				factor = 0
				has_global_flag = ehof_330_taken
			}
			set_global_flag = ehof_330_taken
			ehof_alderson_new_initialize_system = {
				ehof_init_min_angle = @ehof_330_taken_min_angle
				ehof_init_max_angle = @ehof_330_taken_max_angle
			}
		}
		1 = {
			modifier = {
				factor = 0
				has_global_flag = ehof_350_taken
			}
			set_global_flag = ehof_350_taken
			ehof_alderson_new_initialize_system = {
				ehof_init_min_angle = @ehof_350_taken_min_angle
				ehof_init_max_angle = @ehof_350_taken_max_angle
			}
		}
		}

		country_event = {
			id = ehof_systems.001
		}		# Generate Flags
		#country_event = { id = ehof_systems.002 }	# Generate Weather
		#country_event = { id = ehof_systems.006 }	# Generate Deposits
		# disabled deposits, will use generate_home_system_resources instead
		last_created_system = {
			log = "Scoping to last_created_system"
			# Create PGate
			if = {
				limit = {
					NOT = {
						root = {
							has_country_flag = first_ehof_system_spawned
						}
					}
				}
				root = {
					set_country_flag = first_ehof_system_spawned
					set_timed_country_flag = {
						flag = ehof_recently_spawned_guardian
						years = 2
					}					# delay leviathans
				}
				if = {
					limit = {
						any_megastructure = {
							is_megastructure_type = ehof_pgate_gateway
						}
					}
					spawn_megastructure = {
						type = "ehof_pgate_gateway"
						orbit_angle = 110
						orbit_distance = 35
						owner = root
					}
				}
				else = {
					spawn_megastructure = {
						type = "ehof_pgate_unknown"
						orbit_angle = 110
						orbit_distance = 35
						owner = root
					}
				}
			}
			# try to spawn system for alderson
			#stuff
			solar_system = {
				remove_star_flag = sol_sector	# cleanup of stuff used to block New Frontiers subclasser
				star = {
					giga_set_has_mega_flag = yes
				}
				while = { count = 10 giga_field_system_debris = yes }
				create_ambient_object = {
					type = "alderson_frame"
					location = star
					use_3d_location = yes
					base_angle_towards = star
					entity_face_object = star
				}
				last_created_ambient_object = { set_ambient_object_flag = alderson_frame }

				spawn_megastructure = {
					name = "Ruined Hypersegment H"
					type = "alderson_disk_ruined_left"
					orbit_angle = 0
					orbit_distance = 178.75
					owner = from
					init_effect = {
						set_megastructure_flag = alderson_ruined_left
						giga_field_debris = yes
					}
				}

				spawn_megastructure = {
					name = "Ruined Hypersegment B"
					type = "alderson_disk_ruined_right"
					orbit_angle = 90
					orbit_distance = 178.75
					owner = from
					init_effect = {
						set_megastructure_flag = alderson_ruined_right
						giga_field_debris = yes
					}
				}

				spawn_megastructure = {
					name = "Ruined Hypersegment C"
					type = "alderson_disk_ruined_center"
					orbit_angle = 135
					orbit_distance = 180
					owner = from
					init_effect = {
						set_megastructure_flag = alderson_ruined_center
						giga_field_debris = yes
					}
				}

				if = {
					limit = { num_guaranteed_colonies >= 1 }
					spawn_megastructure = {
						name = "Ruined Hypersegment D"
						type = "alderson_disk_ruined_left"
						orbit_angle = 180
						orbit_distance = 178.75
						owner = from
						init_effect = {
							set_megastructure_flag = alderson_ruined_left
							giga_field_debris = yes
						}
					}
				}
				else_if = {
					limit = { num_guaranteed_colonies = 0 }
					spawn_megastructure = {
						name = "Ruined Hypersegment D"
						type = "alderson_disk_ruined_center"
						orbit_angle = 180
						orbit_distance = 178.75
						owner = from
						init_effect = {
							set_megastructure_flag = alderson_ruined_center
							giga_field_debris = yes
						}
					}
				}
				
				if = {
					limit = { num_guaranteed_colonies <= 1 }
					spawn_megastructure = {
						name = "Ruined Hypersegment G"
						type = "alderson_disk_ruined_center"
						orbit_angle = 315
						orbit_distance = 180
						owner = from
						init_effect = {
							set_megastructure_flag = alderson_ruined_center
							giga_field_debris = yes
						}
					}
				}
				else_if = {
					limit = { num_guaranteed_colonies >= 2 }
					spawn_megastructure = {
						name = "Ruined Hypersegment G"
						type = "alderson_disk_ruined_right"
						orbit_angle = 315
						orbit_distance = 180
						owner = from
						init_effect = {
							set_megastructure_flag = alderson_ruined_right
							giga_field_debris = yes
						}
					}
				}

				if = {
					limit = { num_guaranteed_colonies = 0 }
					spawn_megastructure = {
						name = "Ruined Hypersegment E"
						type = "alderson_disk_ruined_center"
						orbit_angle = 225
						orbit_distance = 180
						init_effect = {
							set_megastructure_flag = alderson_ruined_center
							set_megastructure_flag = alderson_guaranteed
							set_megastructure_flag = alderson_guaranteed_1
							giga_field_debris = yes
						}
					}
				}
				else_if = {
					limit = { num_guaranteed_colonies >= 1 }
					spawn_alderson_guaranteed_1_effect = yes 
				}

				if = {
					limit = { num_guaranteed_colonies = 1 }
					spawn_megastructure = {
						name = "Ruined Hypersegment F"
						type = "alderson_disk_ruined_right"
						orbit_angle = 270
						orbit_distance = 178.75
						init_effect = {
							set_megastructure_flag = alderson_ruined_center
							set_megastructure_flag = alderson_guaranteed
							giga_field_debris = yes
						}
					}
				}
				else_if = {
					limit = { num_guaranteed_colonies <= 1 }
					spawn_megastructure = {
						name = "Ruined Hypersegment F"
						type = "alderson_disk_ruined_center"
						orbit_angle = 270
						orbit_distance = 178.75
						init_effect = {
							set_megastructure_flag = alderson_ruined_center
							set_megastructure_flag = alderson_guaranteed
							giga_field_debris = yes
						}
					}
				}
				else_if = {
					limit = { num_guaranteed_colonies >= 2 }
					spawn_alderson_guaranteed_2_effect = yes 
				}
			}
			#endstuff
			save_global_event_target_as = ehofo_new_system
		}
		#country_event = { id = ehof_incohesive_alderson.200 }
		#country_event = { id = ehof_incohesive_alderson.201 }
	}
}

# Generate neighbouring blackhole system
country_event = {
	id = ehof_incohesive_alderson.4
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_origin = origin_alderson_incohesive
	}
	immediate = {
		# Set current system creator
		if = {
			limit = {
				exists = event_target:current_system_creator
			}
			clear_global_event_target = current_system_creator
		}
		save_global_event_target_as = current_system_creator
		event_target:ehofo_new_system = {
			spawn_system = {
				min_distance >= 20
				max_distance <= 30
				hyperlane = no
				initializer = "special_init_01"
			}
		}
		last_created_system = {
			system_star = {
				#prevent_anomaly = yes
				giga_set_has_mega_flag = yes
				clear_deposits = yes
				giga_field_debris = yes
			}
			save_event_target_as = ehof_color_system_name
			set_star_flag = empire_cluster
			add_hyperlane_safe = {
				from = event_target:ehofo_new_system
				to = this
			}
			set_star_flag = ruined_ehof_system
			spawn_megastructure = {
				type = "ehof_megastructure_ruined_origin"
			}
			giga_field_system_debris = yes
		}
		country_event = {
			id = ehof_systems.001
		}		# Generate Flags
		country_event = {
			id = ehof_systems.002
		}		# Generate Weather
		#country_event = { id = ehof_systems.004 }	# Generate Megastructures
		country_event = {
			id = ehof_systems.006
		}		# Generate Deposits
		#country_event = { id = ehof_systems.007 }	# Generate Hostiles
		country_event = {
			id = ehof_systems.005
		}		# Generate System Color
	}
}

# Set homeworld
country_event = {
	id = ehof_incohesive_alderson.5
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_origin = origin_alderson_incohesive
	}
	immediate = {
		capital_scope = {
						set_planet_flag = forbid_guillis_planet_modifiers
			set_planet_flag = gpm_has_planet_rings
			set_planet_flag = hot_zone				# Real Space (Prevents Rings)
			set_planet_flag = megastructure
			set_planet_flag = colony_event			# Vanilla uses to prevent unwanted events on planets
			#set_planet_flag = giga_alderson_gaia
			change_pc = pc_alderson_slice_gaia_shattered
			set_planet_size = 90

			trigger_megastructure_icon = yes
			clear_planet_modifiers = yes
			clear_deposits = yes
			clear_blockers = yes
		
			add_deposit = d_alderson_ruined_district
			add_deposit = d_alderson_ruined_housing
			add_deposit = d_alderson_ruined_miner
			add_deposit = d_alderson_ruined_farmer
			add_deposit = d_alderson_ruined_technician_hive
			add_deposit = d_alderson_ruined_clerk
			add_deposit = d_alderson_ruined_foundry
			#add_deposit = d_alderson_ruined_police
	
			if = {
				limit = { owner = { is_lithoid_empire = yes NOT = { has_valid_civic = civic_hive_devouring_swarm } } }
				while = { count = 4 add_deposit = d_hibernating_lithoids } 
			}
		
			if = {
				limit = { owner = { is_lithoid_empire = yes has_valid_civic = civic_hive_devouring_swarm } }
				while = { count = 2 add_deposit = d_hibernating_lithoids }
			}

			#add_deposit = d_alderson_lost01
			# no

			remove_all_districts = yes
			remove_all_buildings = yes

			if = {
				limit = {
					owner = { is_regular_empire = yes }
				}
	
				# total - 24 jobs
	
				# 3 jobs
				add_district_and_planet_size_if_needed_effect = {
					district = district_city
				}
	
				if = {
					limit = {
						owner = { NOT = { has_valid_civic = civic_agrarian_idyll } }
					}
					while = {
						count = 2
						add_district_and_planet_size_if_needed_effect = {
							district = district_city
						}
					}
				}
				else = {
					while = {
						count = 2 
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming_uncapped
						}
					}
				}
	
				if = {
					limit = { owner = { is_megacorp = yes } }
					add_district_and_planet_size_if_needed_effect = {
						district = district_city
					}
				}
	
				# 4 - 6 jobs
				if = {
					limit = {
						owner = {
							OR = {
								is_lithoid_empire = no
								has_country_flag = non_lithoid_subspecies
							}
						}
					}
					while = {
						count = 2
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming_uncapped
						}
					}
					if = {
						limit = {
							owner = { has_origin = origin_default }
						}
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming_uncapped
						}
					}
				}
				else = {
					while = {
						count = 2
						add_district_and_planet_size_if_needed_effect = {
							district = district_mining_uncapped
						}
					}
				}
	
				# 4 jobs
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining_uncapped
					}
				}
	
				# 2 jobs
				add_district_and_planet_size_if_needed_effect = {
					district = district_srw_commercial
				}
	
				# 4 jobs
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_srw_commercial
				}
	
				# 2 jobs
				if = {
					limit = { owner = { is_megacorp = no } }
					add_district_and_planet_size_if_needed_effect = {
						district = district_srw_commercial
					}
				}
	
				# 3 jobs
				add_building = building_capital
	
				# 2 jobs
				add_building = building_bureaucratic_1
	
				# 2 jobs
				if = {
					limit = {
						owner = {
							has_valid_civic = civic_reanimated_armies
						}
					}
					add_building = building_dread_encampment
	
					solar_system = { #Necromancers do not give engineering. So make sure there's some readily-accessible engineering
						random_system_planet = {
							limit = {
								has_deposit_for = shipclass_research_station
								has_deposit = d_engineering_5
							}
							# Total size 15 deposit as the Irreparable Damage is normally a size 5 and non-Shattered Ring starts get an additional two size 6 deposits.
							add_deposit = d_engineering_10
						}
					}
				}
				else = {
					add_building = building_research_lab_1
				}
	
				# 4-5 jobs
				if = {
					limit = {
						owner = {
							NOT = { has_valid_civic = civic_agrarian_idyll }
						}
					}
					if = {
						limit = {
							owner = {
								is_spiritualist = no
								has_valid_civic = civic_pleasure_seekers
							}
						}
						add_building = building_holo_theatres
						add_district_and_planet_size_if_needed_effect = {
							district = district_srw_commercial
						}
					}
					else_if = {
						limit = {
							owner = {
								is_spiritualist = yes
								has_valid_civic = civic_death_cult
							}
						}
						add_building = building_sacrificial_temple_1
						add_district_and_planet_size_if_needed_effect = {
							district = district_srw_commercial
						}
					}
					else_if = {
						limit = {
							owner = {
								is_megacorp = no
								is_spiritualist = yes
							}
						}
						add_building = building_temple
						add_district_and_planet_size_if_needed_effect = {
							district = district_srw_commercial
						}
					}
					else = {
						add_building = building_commercial_zone
					}
				}
			}
			
			if = {
				limit = {
					owner = { is_hive_empire = yes }
				}
	
				# 9 jobs
				while = {
					count = 3
					add_district_and_planet_size_if_needed_effect = {
						district = district_hive
					}
				}
	
				# 6-9 jobs
				if = {
					limit = {
						owner = { is_lithoid_empire = no }
					}
					while = {
						count = 2
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming_uncapped
						}
					}
				}
				else = {
					while = {
						count = 2
						add_district_and_planet_size_if_needed_effect = {
							district = district_mining_uncapped
						}
					}
				}
	
				# 6 jobs
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining_uncapped
					}
				}
	
				# 6 jobs
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_generator_uncapped
					}
				}
	
				# 2 jobs
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}
	
				# 5 jobs
				add_building = building_hive_capital
	
				# 2 jobs
				add_building = building_research_lab_1
	
				# 2 jobs
				add_building = building_hive_node
	
				# 1 job
				add_building = building_spawning_pool
			}

			if = {
				limit = { owner = { is_machine_empire = yes } }
	
				# total - 27 jobs
	
				# 3 jobs
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_nexus
					}
				}
	
				# 2 jobs
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}
	
				# 6 jobs
				add_building = building_machine_capital
	
				# 1 job
				add_building = building_machine_assembly_plant
	
				# 2 job
				add_building = building_uplink_node
	
				# 2 jobs
				add_building = building_research_lab_1
	
				# 4 jobs
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}
	
				# 8 jobs
				while = {
					count = 4
					add_district_and_planet_size_if_needed_effect = {
						district = district_generator_uncapped
					}
				}
	
				#Assimilators
				if = {
					limit = { owner = { has_civic = civic_machine_assimilator } }
					remove_district = district_generator_uncapped
					if = {
						limit = { owner = { has_country_flag = lithoid_subspecies } }
						add_district_and_planet_size_if_needed_effect = {
							district = district_mining_uncapped
						}
					}
					else = {
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming_uncapped
						}
					}
				}
	
				#Servitors
				if = {
					limit = { owner = { has_civic = civic_machine_servitor } }
					if = {
						limit = { owner = { has_country_flag = lithoid_subspecies } }
						add_district_and_planet_size_if_needed_effect = {
							district = district_mining_uncapped
						}
					}
					else = {
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming_uncapped
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_nexus
					}
					add_building = building_organic_sanctuary
				}
			}
			# i litcherally just copy pasted these from shattered ring

			every_owned_pop = {
				unemploy_pop = yes
				clear_pop_category = yes
			}
			check_planet_employment = yes
		}
			planet = {

				save_global_event_target_as = ehof_origin_species_homeworld_fix
				#generate_start_buildings_and_districts = no 
			}
		}
		species = {
			set_species_homeworld = event_target:ehof_origin_species_homeworld_fix
		}
		every_owned_pop_species = {
			set_species_homeworld = event_target:ehof_origin_species_homeworld_fix
		}
		clear_global_event_target = ehof_origin_species_homeworld_fix
	}


# FIX - Stop connecting to galaxy
country_event = {
	id = ehof_incohesive_alderson.6
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_origin = origin_alderson_incohesive
	}
	immediate = {
		set_spawn_system_batch = begin
		every_system = {
			limit = {
				has_star_flag = cohesive_system
				any_system = {
					has_hyperlane_to = prev
					NOT = {
						has_star_flag = cohesive_system
					}
				}
			}
			every_system = {
				limit = {
					has_hyperlane_to = prev
					NOT = {
						has_star_flag = cohesive_system
					}
				}
				remove_hyperlane_safe = {
					to = this
					from = prev
				}
			}
		}
		set_spawn_system_batch = end
	}
}

# FIX - Remove survey data
system_event = {
	id = ehof_incohesive_alderson.7
	hide_window = yes
	is_triggered_only = yes
	trigger = {#don't remove survey data if owned (it means an AI was reset)
		NOT = { exists = space_owner }
	}

	immediate = {
		every_playable_country = {
			prev = {
				set_surveyed = {
					surveyed = no
					surveyor = prev
				}
			}
		}
	}
}

country_event = {
	id = ehof_incohesive_alderson.8
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_origin = origin_alderson_incohesive
		is_ai = yes
	}

	immediate = {
		giga_reset_ai_start = yes
	}
}

country_event = { 
    id = ehof_incohesive_alderson.200
    hide_window = yes 
    is_triggered_only = yes
	trigger = { has_origin = origin_alderson_incohesive }
    immediate = {
		if = { num_guaranteed_colonies = 0 }
			last_created_system = {
				#spawn megas
			}
		else_if = { num_guaranteed_colonies = 1 }
			last_created_system = {
				spawn_planet = {
					class = "pc_alderson_slice_gaia_shattered" 
					location = solar_system
					orbit_angle_offset = 180
					orbit_distance_offset = 178.75
					size = 90
					init_effect = {
						set_name = "Hypersegment F"
						prevent_anomaly = yes
						set_planet_flag = forbid_guillis_planet_modifiers
						set_planet_flag = gpm_has_planet_rings
						set_planet_flag = dominion_planet
						set_planet_flag = giga_alderson_gaia
						generate_alderson_02_primitives_on_planet = yes
						last_created_country = {
							establish_communications_no_message = root
						}
					}
				}
				#spawn megas and primitive
			}
		else_if = { num_guaranteed_colonies >= 2}
			last_created_system = {
				spawn_planet = {
					class = "pc_alderson_slice_gaia_shattered" 
					location = solar_system
					orbit_angle_offset = 180
					orbit_distance_offset = 178.75
					size = 90
					init_effect = {
						set_name = "Hypersegment F"
						prevent_anomaly = yes
						set_planet_flag = forbid_guillis_planet_modifiers
						set_planet_flag = gpm_has_planet_rings
						set_planet_flag = dominion_planet
						set_planet_flag = giga_alderson_gaia
						generate_alderson_02_primitives_on_planet = yes
						last_created_country = {
							establish_communications_no_message = root
						}
					}
				}
				spawn_planet = {
					class = "pc_alderson_slice_gaia_shattered"
					location = solar_system
					orbit_angle_offset = 135
					orbit_distance_offset = 180
					size = 90
					init_effect = {
						set_name = "Hypersegment E"
						prevent_anomaly = yes
						set_planet_flag = forbid_guillis_planet_modifiers
						set_planet_flag = gpm_has_planet_rings
						set_planet_flag = excognitor_planet
						set_planet_flag = giga_alderson_gaia
						generate_alderson_01_primitives_on_planet = yes
						last_created_country = {
							establish_communications_no_message = root
						}
					}
				}
			}
	}
}