generate_start_buildings_and_districts_ring = {
    optimize_memory
	if = {
		limit = {
			owner = { has_origin = origin_shattered_ring_incohesive }
		}

		add_deposit = d_segment_rubble_1
		add_deposit = d_segment_rubble_2
		add_deposit = d_segment_rubble_3
		add_deposit = d_segment_rubble_4
		add_deposit = d_decrepit_tunnels_1
		add_deposit = d_decrepit_tunnels_1
		add_deposit = d_decrepit_tunnels_1

		if = {
			limit = {
				owner = {
					has_civic = civic_machine_servitor
				}
			}
			add_deposit = d_unsupervised_settlement
		}

		else_if = {
			limit = {
				owner = {
					has_authority = auth_hive_mind
				}
			}
			add_deposit = d_collapsed_burrows
		}

		else = {
			add_deposit = d_decrepit_dwellings
		}

		if = {
			limit = {
				owner = {
					is_lithoid_empire = yes
					NOT = {
						has_valid_civic = civic_hive_devouring_swarm
					}
				}
			}
			while = {
				count = 4
				add_deposit = d_hibernating_lithoids
			}
		}

		if = {
			limit = {
				owner = {
					is_lithoid_empire = yes
					has_valid_civic = civic_hive_devouring_swarm
				}
			}
			while = {
				count = 2
				add_deposit = d_hibernating_lithoids
			}
		}

		if = {
			limit = {
				owner = {
					OR = {
						has_valid_civic = civic_machine_assimilator
						has_valid_civic = civic_machine_servitor
					}
				}
			}

			if = {
				limit = {
					owner = {
						last_created_species = { is_lithoid = yes }
					}
				}
				owner = {
					set_country_flag = lithoid_subspecies
				}
			}
			else = {
				owner = {
					set_country_flag = non_lithoid_subspecies
				}
			}
		}

		if = {
			limit = {
				owner = { is_regular_empire = yes }
			}

			# total - 24 jobs

			# 3 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_city
			}

			if = {
				limit = {
					owner = { NOT = { has_valid_civic = civic_agrarian_idyll } }
				}
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_city
					}
				}
			}
			else = {
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
				if = {
					limit = {
						owner = { has_origin = origin_payback }
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
			}

			if = {
				limit = { owner = { is_megacorp = yes } }
				add_district_and_planet_size_if_needed_effect = {
					district = district_city
				}
			}

			# 4 - 6 jobs
			if = {
				limit = {
					owner = {
						OR = {
							is_lithoid_empire = no
							has_country_flag = non_lithoid_subspecies
						}
					}
				}
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
			}
			else = {
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining_uncapped
					}
				}
			}

			# 4 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}
			}

			# 2 jobs
			add_building = building_factory_1

			# 4 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining_uncapped
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_srw_commercial
			}

			# 2 jobs
			if = {
				limit = { owner = { is_megacorp = no } }
				add_district_and_planet_size_if_needed_effect = {
					district = district_srw_commercial
				}
			}

			# 3 jobs
			add_building = building_capital

			# 2 jobs
			if = {
				limit = { owner = { is_spiritualist = no } }
				add_building = building_bureaucratic_1
			}
			# 2 jobs
			if = {
				limit = {
					owner = {
						is_spiritualist = yes
						OR = {
							has_valid_civic = civic_death_cult
							has_valid_civic = civic_death_cult_corporate
						}
					}
				}
				add_building = building_sacrificial_temple_1
			}
			# 2 jobs
			if = {
				limit = {
					owner = {
						is_spiritualist = yes
						NOT = { has_valid_civic = civic_death_cult }
					}
				}
				add_building = building_temple
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				if = {
					limit = {
						owner = {
							has_valid_civic = civic_reanimated_armies
						}
					}
					add_building = building_dread_encampment

					solar_system = { #Necromancers do not give engineering. So make sure there's some readily-accessible engineering
						random_system_planet = {
							limit = {
								has_deposit_for = shipclass_research_station
								has_deposit = d_engineering_5
							}
							# Total size 15 deposit as the Irreparable Damage is normally a size 5 and non-Shattered Ring starts get an additional two size 6 deposits.
							add_deposit = d_engineering_10
						}
					}
				}
				else = {
					add_building = building_research_lab_1
				}
			}

			if = {
				limit = {
					owner = {
						has_valid_civic = civic_permanent_employment
					}
				}
				add_building = building_posthumous_employment_center
			}
			# 4-5 jobs
			if = {
				limit = {
					owner = {
						NOT = { has_valid_civic = civic_agrarian_idyll }
					}
				}
				if = {
					limit = {
						owner = {
							is_spiritualist = no
							has_valid_civic = civic_pleasure_seekers
						}
					}
					add_building = building_holo_theatres
					add_district_and_planet_size_if_needed_effect = {
						district = district_srw_commercial
					}
				}
				else_if = {
					limit = {
						owner = {
							is_spiritualist = yes
							OR = {
								has_valid_civic = civic_death_cult
								has_valid_civic = civic_death_cult_corporate
							}
						}
					}
					add_building = building_sacrificial_temple_1
					add_district_and_planet_size_if_needed_effect = {
						district = district_srw_commercial
					}
				}
				else_if = {
					limit = {
						owner = {
							is_megacorp = no
							is_spiritualist = yes
						}
					}
					add_building = building_temple
					add_district_and_planet_size_if_needed_effect = {
						district = district_srw_commercial
					}
				}
				else = {
					add_building = building_commercial_zone
				}
			}
		}

		if = {
			limit = {
				owner = { is_hive_empire = yes }
			}

			# 9 jobs
			while = {
				count = 3
				add_district_and_planet_size_if_needed_effect = {
					district = district_hive
				}
			}

			# 6-9 jobs
			if = {
				limit = {
					owner = { is_lithoid_empire = no }
				}
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
			}
			else = {
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining_uncapped
					}
				}
			}

			# 6 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}
			}

			# 6 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator_uncapped
				}
			}

			# 2 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining_uncapped
			}

			# 5 jobs
			add_building = building_hive_capital

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				add_building = building_research_lab_1
			}

			# 2 jobs
			add_building = building_hive_node

			# 1 job
			if = {
				limit = {
					owner = { has_origin = origin_progenitor_hive }
				}
				add_building = building_offspring_nest
			}
			else = {
				add_building = building_spawning_pool
			}

			# 1 job
			add_building = building_hive_warren
		}

		# Replace capital building for machine empires
		if = {
			limit = { owner = { is_machine_empire = yes } }

			# total - 27 jobs

			# 3 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_nexus
				}
			}

			# 2 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining_uncapped
			}

			# 6 jobs
			add_building = building_machine_capital

			# 1 job
			add_building = building_machine_assembly_plant

			# 2 job
			if = {
				limit = { owner = { NOT = { has_valid_civic = civic_machine_servitor } } }
				add_building = building_uplink_node
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				add_building = building_research_lab_1
			}

			# 4 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining_uncapped
			}

			# 8 jobs
			while = {
				count = 4
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator_uncapped
				}
			}

			#Assimilators
			if = {
				limit = { owner = { has_civic = civic_machine_assimilator } }
				remove_district = district_generator_uncapped
				if = {
					limit = { owner = { has_country_flag = lithoid_subspecies } }
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining_uncapped
					}
				}
				else = {
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
			}

			#Servitors
			if = {
				limit = { owner = { has_civic = civic_machine_servitor } }
				if = {
					limit = { owner = { has_country_flag = lithoid_subspecies } }
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining_uncapped
					}
				}
				else = {
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming_uncapped
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_nexus
				}
				add_building = building_organic_sanctuary
			}
		}
	}

	if = {
		limit = {
			owner = {
				is_relentless_industrialist_empire = yes
			}
			free_building_slots > 0
		}
		add_building = building_coordinated_fulfillment_center_1
	}

	# Additional resources based on empire type and possible subspecies
	owner = {
		give_starting_resources_effect = yes
	}
}

spawn_alderson_guaranteed_1_effect = {
	spawn_planet = {
		class = "pc_alderson_slice_gaia_shattered"
		location = solar_system
		orbit_angle_offset = 135
		orbit_distance_offset = 180
		size = 90
		init_effect = {
			set_name = "Hypersegment E"
			prevent_anomaly = yes
			set_planet_flag = forbid_guillis_planet_modifiers
			set_planet_flag = gpm_has_planet_rings
			set_planet_flag = excognitor_planet
			set_planet_flag = giga_alderson_gaia
			generate_alderson_01_primitives_on_planet = yes
			last_created_country = {
				establish_communications_no_message = root
			}
		}
	}
}

spawn_alderson_guaranteed_2_effect = {
	spawn_planet = {
		class = "pc_alderson_slice_gaia_shattered"
		location = solar_system
		orbit_angle_offset = 180
		orbit_distance_offset = 178.75
		size = 90
		init_effect = {
			set_name = "Hypersegment F"
			prevent_anomaly = yes
			set_planet_flag = forbid_guillis_planet_modifiers
			set_planet_flag = gpm_has_planet_rings
			set_planet_flag = dominion_planet
			set_planet_flag = giga_alderson_gaia
			generate_alderson_02_primitives_on_planet = yes
			last_created_country = {
				establish_communications_no_message = root
			}
		}
	}
}

generate_start_pops_incohesive = {
	optimize_memory
	# SECONDARY SPECIES STARTS: add Traits, set living standards, etc.
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_syncretic_evolution
					has_origin = origin_necrophage
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
				}
			}
		}

		if = { # Machines: Add 'Machine' Trait
			limit = {
				last_created_species = { is_species_class = MACHINE }
			}
			modify_species = {
				species = last_created_species
				add_trait = trait_machine_unit
				add_traits_at_start_of_list = yes
			}
			last_created_species = {
				save_event_target_as = last_created_species
			}
		}

		# Syncretic Evolution & Necrophage: set flag & citizenship type; (Necrophage) spawn prepatent Pops
		if = {
			limit = {
				owner = {
					OR = {
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
					}
				}
			}

			last_created_species = {
				set_species_flag = syncretic_species@root.owner
				if = {
					limit = {
						prev.owner = {
							has_origin = origin_syncretic_evolution
						}
					}
					set_citizenship_type = {
						country = root.owner
						type = citizenship_slavery
					}
				}
			}
			if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						OR = {
							has_valid_civic = civic_fanatic_purifiers
							has_valid_civic = civic_hive_devouring_swarm
							is_gestalt = yes
						}
					}
				}
				while = {
					count = 6
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else_if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						is_gestalt = yes
					}
				}
				while = {
					count = 9
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else = {
				while = {
					count = 12
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
		}
		generate_servitor_assmiliator_secondary_pops = yes
	}

	# Mechanist: spawn robot Pops; add Job-specific Traits; spawn Robot Assembly Plant
	if = {
		limit = {
			owner = { has_origin = origin_mechanists }
		}
		owner = {
			create_built_robot_species = yes
		}
		last_created_species = {
			change_species_characteristics = {
				add_trait = trait_auto_mod_robotic
			}
		}
		while = {
			count = 8
			create_pop = {
				species = last_created_species
			}
		}
		add_building = building_robot_assembly_plant
		add_district_and_planet_size_if_needed_effect = {
			district = district_generator
		}
		while = {
			limit = { num_pops < 27 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}

	# (Non-Purging) Necrophage: add Buildings & Districts
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				NOR = { #purges them instead
					has_civic = civic_fanatic_purifiers
					has_civic = civic_hive_devouring_swarm
				}
			}
		}
		if = {
			limit = {
				owner = { has_valid_civic = civic_agrarian_idyll } # Needs an extra building slot
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_city
			}
		}

		add_building = building_necrophage_elevation_chamber
	}

	# Necrophage + Devouring Swarm: spawn Buildings
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				has_valid_civic = civic_hive_devouring_swarm #purges them instead
				is_lithoid_empire = no
			}
		}
		add_building = building_spawning_pool
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				has_valid_civic = civic_hive_devouring_swarm
				is_lithoid_empire = yes
			}
		}
		add_district_and_planet_size_if_needed_effect = { district = district_mining }
	}

	# Clone Army: spawn Buildings
	if = {
		limit = {
			owner = {
				has_origin = origin_clone_army
			}
		}
		add_building = building_clone_army_clone_vat
		add_building = building_clone_army_clone_vat
		planet_event = { id = clones.10 days = 1095 random = 720 }
	}

	# MISC: spawn Pops
	if = {
		limit = {
			owner = { is_hive_empire = yes }
		}
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_valid_civic = civic_machine_servitor }
		}
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { is_machine_empire = yes } }
		while = {
			limit = { num_pops < 29 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_megacorp = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_broken_shackles }
			num_pops < 6
		}

		while = {
			limit = { num_pops < 6 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_regular_empire = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_payback }
			num_pops < 18
		}
		while = {
			limit = { num_pops < 18 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_fear_of_the_dark }
		}
		while = {
			count = 20
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { #homicidal necrophages lose 1/4 of their necrophytes to fleeing
			owner = {
				has_origin = origin_necrophage
				is_homicidal = yes
			}
		}
		while = {
			count = 2
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_default }
		}
		while = {
			count = 4
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
			}
		}
		while = {
			count = 10
			random_owned_pop = {
				limit = {
					is_same_species = root.owner.species
				}
				kill_pop = yes
			}
		}
	}

	# Permanent Employment: add Zombie Trait
	if = {
		limit = {
			owner = {
				has_civic = civic_permanent_employment
			}
		}
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					OR = {
						has_job = clerk
						has_job = technician
						has_job = miner
						has_job = farmer
					}
					is_robotic_species = no
				}
				modify_species = {
					species = this
					add_trait = trait_zombie
					add_traits_at_start_of_list = yes
				}
				if = {
					limit = {
						has_trait = trait_syncretic_proles
					}
					modify_species = {
						species = this
						remove_trait = trait_syncretic_proles
					}
				}
			}
		}
	}

	# Cybernetic Creed: add Unique Traits
	if = {
		limit = {
			owner = {
				has_origin = origin_cybernetic_creed
			}
		}
		while = {
			limit = {
				any_owned_pop = {
					is_robotic_species = no
					has_ethic = ethic_spiritualist
					has_cybernetic_creed_trait = no
				}
			}
			random_owned_pop = {
				limit = {
					is_robotic_species = no
					has_ethic = ethic_spiritualist
					has_cybernetic_creed_trait = no
				}
				modify_species = {
					species = this
					add_trait = trait_cyborg_ritualistic_implants
					add_traits_at_start_of_list = yes
				}
			}
		}
		while = {
			limit = {
				any_owned_pop = {
					has_cybernetic_creed_trait = no
					OR = {
						is_pop_category = ruler
						is_pop_category = specialist
					}
				}
			}
			random_owned_pop = {
				limit = {
					has_cybernetic_creed_trait = no
				}
				clear_pop_category = yes
			}
		}
		owner = {
			set_policy = {
				policy = robot_pop_policy
				option = robot_pops_allowed
				cooldown = no
			}
		}
	}

	#Synthetic Fertility
	if = {
		limit = {
			owner = { has_origin = origin_synthetic_fertility }
		}
		while = {
			count = 9
			create_pop = {
				species = owner
			}
		}
	}
}

void_dweller_home_planet_setup_incohesive = {
	optimize_memory
	set_planet_flag = habitat_level_2
	owner = {
		save_event_target_as = void_dweller_owner
	}
	solar_system = {
		random_system_planet = {
			limit = { has_planet_flag = habitat_1_planet }
			save_event_target_as = habitat_1_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_1_planet
			coords_from = event_target:habitat_1_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		random_system_planet = {
			limit = { has_planet_flag = habitat_2_planet }
			save_event_target_as = habitat_2_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_2_planet
			coords_from = event_target:habitat_2_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		random_system_planet = {
			limit = { has_planet_flag = habitat_3_planet }
			save_event_target_as = habitat_3_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_3_planet
			coords_from = event_target:habitat_3_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		if = {
			limit = {
				event_target:void_dweller_owner = {
					is_lithoid_empire = yes
				}
			}
			random_system_planet = {
				limit = {
					has_deposit = no
					is_colonizable = no
				}
				add_deposit = d_minerals_4
				set_planet_flag = mining_planet
			}
		}
		every_system_planet = {
			limit = { has_planet_flag = mining_planet }
			create_mining_station = { owner = event_target:void_dweller_owner }
		}
		# Change starting pre-scripted ideal into inhabitable worlds
		# First pre-sripted is a research system
	}
	event_target:habitat_1_planet = {
		set_planet_flag = habitat@PREV
	}
	owner = {
		give_starting_resources_effect = yes
		give_technology = {
			tech = tech_habitat_1
			message = no
		}
		add_research_option = tech_habitat_2

		if = {
			limit = {
				OR = {
					AND = {
						is_lithoid_empire = no
						is_mechanical_species = no
					}
					is_catalytic_empire = yes
				}
			}
			give_technology = {
				tech = tech_eco_simulation
				message = no
			}
			give_technology = {
				tech = tech_hydroponics
				message = no
			}
			root.solar_system.starbase = {
				remove_starbase_building = {
					slot = 1
				}
				set_starbase_building = {
					slot = 1
					building = hydroponics_bay
				}
			}
		}
		else = {
			give_technology = {
				tech = tech_powered_exoskeletons
				message = no
			}
			give_technology = {
				tech = tech_space_mining_1
				message = no
			}

		}
		if = {
			limit = {
				has_valid_civic = civic_private_healthcare_corporate
			}
			give_technology = { message = no tech = tech_frontier_health }
			add_research_option = tech_subdermal_stimulation
		}
	}

	if = {
		limit = {
			owner = {
				NOR = {
					is_eager_explorer_empire = yes
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
				}
			}
		}
		while = {
			count = 28
			create_pop = {
				species = owner_main_species
			}
		}
	}
	else_if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
			}
		}
		while = {
			count = 18
			create_pop = {
				species = owner_main_species
			}
		}
	}
	else_if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
				OR = {
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
				}
			}
		}
		generate_servitor_assmiliator_secondary_pops_incohesive = yes
		while = {
			limit = { num_pops < 18 }
			create_pop = {
				species = owner_main_species
			}
		}
	}
	else = {
		generate_servitor_assmiliator_secondary_pops_incohesive = yes
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
		}
		while = {
			count = 5
			create_pop = {
				species = owner_main_species
			}
		}
	}

	if = {
		limit = {
			owner = {
				has_valid_civic = civic_permanent_employment
			}
		}
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					OR = {
						has_job = clerk
						has_job = technician
						has_job = miner
						has_job = farmer
					}
					is_robotic_species = no
				}
				modify_species = {
					species = this
					add_trait = trait_zombie
					add_traits_at_start_of_list = yes
				}
				if = {
					limit = {
						has_trait = trait_syncretic_proles
					}
					modify_species = {
						species = this
						remove_trait = trait_syncretic_proles
					}
				}
			}
		}
	}

	set_planet_entity = {
		entity = "habitat_phase_03_entity"
		graphical_culture = owner
	}
	set_planet_size = 6
	add_deposit = d_arcane_replicator
	while = {
		count = 2
		add_district = {
			district_type = district_hab_housing
			ignore_cap = yes
		}
	}
	add_district = {
		district_type = district_hab_industrial
		ignore_cap = yes
	}
	while = {
		count = 2
		add_district = {
			district_type = district_hab_mining
			ignore_cap = yes
		}
	}
	add_district = {
		district_type = district_hab_energy
		ignore_cap = yes
	}
	add_building = building_hab_major_capital
	if = {
		limit = {
			owner = {
				is_eager_explorer_empire = no
			}
		}
		add_district = {
			district_type = district_hab_science
			ignore_cap = yes
		}
	}
	if = {
		limit = {
			owner = {
				OR = {
					AND = {
						is_lithoid_empire = no
						is_mechanical_species = no
					}
					OR = {
						is_catalytic_empire = yes
						has_country_flag = non_lithoid_subspecies
					}
				}
			}
		}
		add_building = building_hydroponics_farm
	}
	#Tactical Cogitators
	if = {
		limit = {
			owner = {
				has_valid_civic = civic_machine_tactical_algorithms
			}
		}
		owner = {
			give_technology = {
				tech = tech_centralized_command
				message = no
			}
		}
		add_building = building_military_academy
	}
	if = {
		limit = {
			owner = {
				is_gestalt = no
			}
		}
		# Unity Building - Admin/Sacrificial Temple/Temple
		if = {
			limit = {
				owner = {
					is_spiritualist = no
				}
			}
			add_building = building_bureaucratic_1
		}
		if = {
			limit = {
				owner = {
					is_spiritualist = yes
					OR = {
						has_valid_civic = civic_death_cult
						has_valid_civic = civic_death_cult_corporate
					}
				}
			}
			add_building = building_sacrificial_temple_1
		}
		if = {
			limit = {
				owner = {
					is_spiritualist = yes
					NOR = {
						has_valid_civic = civic_death_cult
						has_valid_civic = civic_death_cult_corporate
					}
				}
			}
			add_building = building_temple
		}

		# Amenity Building - Holo-Theatres/Clinc/Sacrificial Temple/Temple/Commercial Zone
		if = {
			limit = {
				owner = {
					is_spiritualist = no
					is_pleasure_seeker = yes
				}
			}
			add_building = building_holo_theatres
		}
		#Aug Bazaar
		else_if = {
			limit = {
				owner = {
					has_valid_civic = civic_augmentation_bazaars
				}
				free_building_slots > 0
			}
			add_building = building_augmentation_bazaars
		}
		# Pharma State
		else_if = {
			limit = {
				owner = {
					has_valid_civic = civic_private_healthcare_corporate
				}
			}
			add_building = building_clinic
		}
		else_if = {
			limit = {
				owner = {
					is_spiritualist = yes
					OR = {
						has_valid_civic = civic_death_cult
						has_valid_civic = civic_death_cult_corporate
					}
				}
			}
			add_building = building_sacrificial_temple_1
		}
		else_if = {
			limit = {
				owner = {
					is_megacorp = no
					is_spiritualist = yes
				}
			}
			add_building = building_temple
		}
		else = {
			add_building = building_commercial_zone
		}

		# Permanent Employment
		if = {
			limit = {
				owner = {
					has_valid_civic = civic_permanent_employment
				}
				free_building_slots > 0
			}
			add_building = building_posthumous_employment_center
		}

		# Relentless Industrialists
		if = {
			limit = {
				owner = {
					is_relentless_industrialist_empire = yes
				}
				free_building_slots > 0
			}
			add_building = building_coordinated_fulfillment_center_1
		}
		if = {
			limit = {
				owner = { is_individual_machine = yes }
			}
			add_building = building_machine_assembly_plant
		}
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
		}
		add_building = building_hive_node
		add_building = building_spawning_pool
	}
	else = {
		add_building = building_machine_assembly_plant
		if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_servitor
				}
			}
			add_building = building_organic_sanctuary
		}
		else = {
			add_building = building_uplink_node
		}
	}
}

generate_servitor_assmiliator_secondary_pops_incohesive = {
	# Ensuring that this country flag has been set by this point
	if = {
		limit = {
			owner = {
				OR = {
					last_created_species = { is_lithoid = yes }
					last_created_species = { has_trait = trait_machine_unit }
				}
			}
		}
		owner = {
			set_country_flag = lithoid_subspecies
		}
	}
	else = {
		owner = {
			set_country_flag = non_lithoid_subspecies
		}
	}
	# Rogue Servitor & Driven Assimilator setting up pop special traits to make sure that their secondary species have all the cool traits. Spawning of the pops happens next.
	if = {
		limit = {
			owner = {
				OR = {
					has_valid_civic = civic_machine_assimilator
					has_valid_civic = civic_machine_servitor
				}
				OR = {
					has_origin = origin_void_machines_incohesive
					#has_origin = origin_post_apocalyptic_machines
					#has_origin = origin_subterranean_machines
				}
			}
		}
		owner = {
			switch = {
				trigger = has_origin
				origin_void_machines_incohesive = {
					last_created_species = {
						modify_species = {
							species = this
							add_trait = trait_void_dweller_1_incohesive
							add_traits_at_start_of_list = yes
							ideal_planet_class = pc_habitat
						}
					}
				}
				# origin_post_apocalyptic_machines = {
				# 	last_created_species = {
				# 		change_species_characteristics = {
				# 			add_trait = trait_survivor
				# 			add_traits_at_start_of_list = yes
				# 		}
				# 	}
				# }
				# origin_subterranean_machines = {
				# 	last_created_species = {
				# 		change_species_characteristics = {
				# 			add_trait = trait_cave_dweller
				# 			add_traits_at_start_of_list = yes
				# 		}
				# 	}
				# }
			}
		}
	}
	# Rogue Servitor: set citizenship, living standard & preference; spawn Pops
	if = {
		limit = {
			owner = { has_valid_civic = civic_machine_servitor }
		}
		last_created_species = {
			if = {
				limit = {
					root = {
						OR = {
							is_planet_class = pc_shattered_ring_habitable
							is_planet_class = pc_gaia
						}
					}
				}
				modify_species = {
					species = this
					ideal_planet_class = home_planet
				}
			}
			set_citizenship_type = {
				country = root.owner
				type = citizenship_limited
			}
			set_living_standard = {
				country = root.owner
				type = living_standard_organic_trophy
			}
		}
		while = {
			count = 5
			create_pop = {
				species = last_created_species
				ethos = random
			}
			last_created_pop = {
				clear_ethos = yes
			}
		}
	}

	# Driven Assimilator: set citizenship, living standard & preference; spawn Pops
	if = {
		limit = {
			owner = { has_valid_civic = civic_machine_assimilator }
		}
		last_created_species = {
			if = {
				limit = {
					root = {
						OR = {
							is_planet_class = pc_shattered_ring_habitable
							is_planet_class = pc_gaia
						}
					}
				}
				modify_species = {
					species = this
					ideal_planet_class = home_planet
				}
			}
			set_citizenship_type = {
				country = root.owner
				type = citizenship_full_machine
			}
			set_living_standard = {
				country = root.owner
				type = living_standard_hive_mind
			}
		}
		while = {
			count = 10
			create_pop = {
				species = last_created_species
				ethos = random
			}
			last_created_pop = {
				clear_ethos = yes
			}
		}
	}
}